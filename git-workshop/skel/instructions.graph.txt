# Empty Repository

run: git init

Note the contents of HEAD and refs/heads/

Git does a couple things implicitly (as configured in .gitconfig).

# First Commit

run: commit_something 'great'

Note the contents of refs/heads/berlin

# Adding More Commits

run: commit_something 'is'

What do you notice about HEAD?
What changes in refs/heads/berlin?

What's structurally different between the following:

git cat-file -t p HEAD
git cat-file -t p HEAD^

How does the latest commit know its parent?

Add a few more commits (5 total) 

run: commit_something 'git'
run: commit_something 'think'
run: commit_something 'I'

What do you think the job of the branch is?
What is the job of HEAD?

# Detached HEAD State

Checkout the SHA for the commit with the message 'git'.

run: git checkout HEAD^^

What happened to HEAD, and what happened to the berlin branch?
What is a detached head state? What is is HEAD detached from?

run: git log --oneline

What commits did this output? What was left out?

# Checkout To Safety

Checkout the berlin branch. This should make HEAD point back to the
berlin branch.

run: git checkout berlin

What did git checkout do to HEAD?

# Creating A Branch

run: git branch munich

What are your observations of the contents of the files in refs/heads?

Then checkout this new branch (ignore checkout -b shorthand)

run: git checkout munich

Which git object changed?

### Let's Reset

Get back onto berlin and reset it to HEAD^. This should make berlin point
to the commit with the message 'think'.

run: git checkout berlin
run: git reset --hard HEAD^

What git object changed?

# I Feel A Divergence In The Graph

Make a new commit with the message 'do not'.

run: commit_something 'do not'

Now there should be a divergence in the graph. A `git log` should result in
"do not think git is great".

run: git log --oneline

Why is 'I' not printed?

# All Your Rebase Are Belong To Us

Lastly, perform `git rebase berlin munich`. This should replay the 'I'
commit on top of the 'do not' commit. The tricky part about this one is that the
original 'I' commit does not change. Someone else joins the graph and points to
'do not' with their own message of 'I'. Also, munich moves to the replayed
commit and HEAD now points to munich. `git log` should say "I do not think git
is great".

run: git rebase berlin munich

Note that HEAD will always point to the branch that is being rebased.

run: git reflog

Does the previous commit 'I' exist?

# Garbage Man Cometh

Maybe emulate git garbage collection and destroy the unreferenced commit
that got lost due to the rebase.

    git -c gc.reflogExpireUnreachable=0 -c gc.pruneExpire=now gc

# Burning The Reflog

Ask about the journal of commands

SCROLL TO THE TOP
